{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished'
  ]
%}

{%
  set field_title_classes = [
  'field',
  'field--name-' ~ content.field_title['#field_name'],
  'field--type-' ~ content.field_title['#field_type'],
  'field--label-' ~ content.field_title['#label_display'],
]
%}

{%
  set field_cta_link_classes = [
  'field',
  'field--name-' ~ content.field_cta_link['#field_name'],
  'field--type-' ~ content.field_cta_link['#field_type'],
  'field--label-' ~ content.field_cta_link['#label_display'],
]
%}

{% set title = content.field_title ? content.field_title.0|render : '' %}

{% set bg_img = content.field_background_image ? 'background-image:url(' ~ file_url(content.field_background_image|field_target_entity.field_media_image.entity.uri.value) ~ ');' : '' %}
{% set bg_color = content.field_background_color ? 'background-color:' ~ content.field_background_color.0|render ~ ';' : '' %}
{% set txt_color = content.field_text_color ? 'color:' ~ content.field_text_color.0|render ~ ';' : '' %}
{% set style = 'style=' ~ bg_img ~ bg_color ~ txt_color %}

{% set link_title = content.field_cta_link ? content.field_cta_link.0['#title'] : '' %}
{% set href = 'href=' ~ (content.field_cta_link.0['#url'] ? content.field_cta_link.0['#url']|render : '') %}
{% set link_style = 'style=' ~ (content.field_link_color ? 'color:' ~ content.field_link_color.0|render ~ ';' : '') %}

{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    {% block content %}
      <div {{ title_attributes.addClass(field_title_classes) }} {{ style }}">
        {{ title }}
      </div>
      <div{{ content_attributes.addClass(field_cta_link_classes) }} {{ link_style }}>
        <a {{ href }} {{ link_style }}>{{ link_title }}</a>
      </div>
    {% endblock %}
  </div>
{% endblock paragraph %}
